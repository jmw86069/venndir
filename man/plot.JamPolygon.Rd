% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/JamPolygon.R
\name{plot.JamPolygon}
\alias{plot.JamPolygon}
\title{Plot JamPolygon object}
\usage{
\method{plot}{JamPolygon}(
  x,
  y,
  xlim = NULL,
  ylim = NULL,
  flip_sign = 1,
  render_vectorized = FALSE,
  render_thin_border = TRUE,
  linejoin = c("bevel", "mitre", "round"),
  mitrelimit = -20,
  show_labels = TRUE,
  buffer = 0.05,
  do_newpage = TRUE,
  do_viewport = TRUE,
  do_pop_viewport = TRUE,
  do_draw = TRUE,
  verbose = FALSE,
  debug = FALSE,
  ...
)
}
\arguments{
\item{x}{\code{JamPolygon} object}

\item{y}{not used.}

\item{xlim, ylim}{\code{numeric} optionally used to define the x- and y-axis
range to be rendered. When \code{NULL} they are defined using the
observed range of values.}

\item{flip_sign}{\code{logical} indicating whether to flip the polygon
orientation, or \code{numeric} where the sign is multiplied by the
polygon orientation.
The polygon orientation is used to define inner/outer border, relative
to whether the border represents a solid inner polygon, or the hole
inside a solid polygon. In most cases, the orientation is automatically
recognized and applied appropriately.
Specifically:
\itemize{
\item \code{TRUE} or \code{-1} reverses the polygon orientation of
inner/outer border
\item \code{FALSE} or \code{1} keeps the polygon orientation unchanged.
}}

\item{render_vectorized}{\code{logical} indicating whether to render all
polygons in one call, thereby ignoring \code{innerborder} values. All
\code{border} values are rendered as regular polygon borders. This option
may be substantially faster for large collections of polygons.}

\item{render_thin_border}{\code{logical} indicating whether to render a thin
border on the border itself, default \code{TRUE} renders a thin grey line.}

\item{linejoin}{\code{character} string (default \code{"bevel"}) passed to
\code{grid::grid.path()} and \code{vwline::grid.vwline()} when rendering
polygons, and inner/outer polygon borders, respectively.
Note that vwline version \verb{0.2.2} displayed some graphical glitches
when used with \code{"mitre"} and \code{"round"}, so \code{"bevel"} is the new default.}

\item{mitrelimit}{\code{numeric} passed to \code{vwline::grid.vwline()} to adjust
the maximum extension at a line join caused by \code{linejoin="mitre"}.}

\item{show_labels}{\code{logical} indicating whether to render labels for
each polygon. Note that labels are rendered after all polygons are
drawn, so they will not be covered by other polygons.}

\item{buffer}{\code{numeric} used to expand the x- and y-axis range beyond
the polygons to be drawn.}

\item{do_newpage}{\code{logical} (default TRUE) indicating whether to call
\code{grid::grid.newpage()} to open a new graphical output page.}

\item{do_viewport}{\code{logical} (default TRUE) indicating whether to define
and push a new \code{grid} viewport with \code{grid::grid.pushViewport()}.}

\item{do_pop_viewport}{\code{logical} (default TRUE) indicating whether to
close/pop the \code{grid} viewport with \code{grid::popViewport()}.
This action is only performed when \code{do_viewport=TRUE}.
This option is intended to allow layering multiple calls to this
or other \code{grid} functions.}

\item{do_draw}{\code{logical} (default TRUE) indicating whether to call
\code{grid::grid.draw()} for each graphical object.
When \code{do_draw=FALSE}, it also forces \code{do_newpage=FALSE},
\code{do_viewport=FALSE}, and \code{do_pop_viewport=FALSE}.}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{debug}{\code{logical} (default FALSE) indicating whether to enable
debug operations. When \code{debug=TRUE} it is also passed to \code{grid}
functions such as \code{vwline::grid.vwline()} to display internal
calculations in the graphical output.}

\item{...}{additional arguments are recognized to customize plot features.}
}
\value{
\code{JamPolygon} object, invisibly. Some \code{grid} attributes are
added to the returned object:
\itemize{
\item \code{"adjx"},\code{"adjy"}: functions to adjust native x/y values to
the corresponding \code{grid} units in \code{"snpc"}.
\item \code{"viewport"}: the \code{grid::viewport()} object suitable to push
the same viewport in order to add features to an existing plot.
\item \code{"xrange"},\code{"yrange"}: x- and y-axis ranges used to determine
the viewport to be used.
\item \code{"grob_tree"}: a \code{grid::gTree} object suitable to call
\code{grid::grid.draw()}. It includes the same \code{viewport}, so it
does not need to have the viewport defined.
}
}
\description{
Plot JamPolygon object
}
\details{
This function is a general purpose function to plot \code{JamPolygon}
objects using \code{grid} graphics.

It currently calls direct rendering functions, for example
\code{grid::grid.path()}, \code{grid::grid.lines()}.

Rendering guidelines used by this function:
\itemize{
\item Each polygon is rendered in order, and in series.
\item All polygon labels are rendered afterward, so that labels
are not covered by subsequent polygons.
}
\subsection{Rendering options recognized in \code{jp@polygons}:}{
\itemize{
\item \code{name}, \code{label} - name and display label. A \code{label} of \code{NA} or \code{""}
will not be rendered.
\item \code{label_color} - color used to render each polygon label.
\item \code{family}, \code{fontsize} - font family, and font point size used to render
each polygon label.
\item \code{x}, \code{y} - x- and y-coordinates to define each polygon or multipolygon.
\item \code{fill} - polygon fill color, or \code{NA} for no fill color.
\item \code{border}, \code{border.lwd} - border color and line width (outer border)
\item \code{innerborder}, \code{innerborder.lwd} - inner border and line width
}

Todo:
\enumerate{
\item Enable arguments in \code{...} to override equivalent values in columns of
\code{jp@polygons}.
\item Convert \code{grid} rendering to generate graphical objects (grobs)
which can be optionally rendered, or returned as a \code{gTree}.
\item Continue debugging the \code{vwline} graphical glitches which are
apparent when rendering outer borders.
See \link{https://github.com/pmur002/vwline/issues/2}.
\itemize{
\item Current recommendation is to render outer border after the inner
border, and with outer border at least the same or larger width
as the inner border. Otherwise, for acute angles, inner border may
exceed the outer border because of its line width. However, if the
outer border is drawn afterward, it will fully cover the inner border.
With sufficiently small inner border width, the graphical glitch may
not be apparent.
}
\item Consider allowing labels for each multi-part polygon.
\item Consider drawing optional x- and y-axis, although both could be added
using \code{grid} functions.
}
}
}
\examples{
dfx <- data.frame(name=c("polygon1", "polygon2"),
   x=I(list(
      list(c(1, 4, 4, 1),
         c(2, 3, 3, 2)),
      c(5, 6, 6, 5))),
   y=I(list(
      list(c(1, 1, 4, 4),
         c(2, 2, 3, 3)),
      c(1, 1, 2, 2))),
   fill=c("gold", "firebrick"))
jpx <- new("JamPolygon", polygons=dfx);
plot(jpx);

dfz <- data.frame(name=c("polygon1", "polygon2", "polygon3"),
   x=I(list(
      list(c(1, 4, 4, 1),
         c(2, 3, 3, 2)),
      list(c(4.5, 6.5, 6.5, 4.5),
         c(5, 6, 6, 5)),
      list(c(1, 4, 4, 1),
         c(2, 3, 3, 2),
         c(5, 6, 6, 5)))),
   y=I(list(
      list(c(1, 1, 4, 4),
         c(2, 2, 3, 3)),
      list(c(1, 1, 3, 3),
         c(3, 3, 4, 4)+0.5),
      list(c(5, 5, 8, 8),
         c(6, 6, 7, 7),
         c(6, 6, 7, 7)))),
   fill=c("gold", "firebrick", "dodgerblue"));
jpz <- new("JamPolygon", polygons=dfz);
jpz@polygons[, c("label_x", "label_y")] <- as.data.frame(labelr_JamPolygon(jpz))
jpz@polygons$border <- c("orange", "gold", "purple");
jpz@polygons$border.lwd <- c(3, 4, 5);
#jpz <- add_orientation_JamPolygon(jpz);
plot(jpz);

}
\seealso{
Other JamPolygon: 
\code{\link{JamPolygon-class}},
\code{\link{Venndir-class}},
\code{\link{add_orientation_JamPolygon}()},
\code{\link{area_JamPolygon}()},
\code{\link{bbox_JamPolygon}()},
\code{\link{buffer_JamPolygon}()},
\code{\link{check_JamPolygon}()},
\code{\link{check_Venndir}()},
\code{\link{eulerr_to_JamPolygon}()},
\code{\link{farthest_point_JamPolygon}()},
\code{\link{find_venn_overlaps_JamPolygon}()},
\code{\link{has_point_in_JamPolygon}()},
\code{\link{intersect_JamPolygon}()},
\code{\link{label_fill_JamPolygon}()},
\code{\link{label_outside_JamPolygon}()},
\code{\link{label_segment_JamPolygon}()},
\code{\link{labelr_JamPolygon}()},
\code{\link{minus_JamPolygon}()},
\code{\link{nearest_point_JamPolygon}()},
\code{\link{plot,JamPolygon,missing-method}},
\code{\link{point_in_JamPolygon}()},
\code{\link{polyclip_to_JamPolygon}()},
\code{\link{sample_JamPolygon}()},
\code{\link{split_JamPolygon}()},
\code{\link{union_JamPolygon}()},
\code{\link{update_JamPolygon}()}
}
\concept{JamPolygon}
