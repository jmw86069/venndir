% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/venndir-meme.R
\name{venn_meme}
\alias{venn_meme}
\title{Venn Meme}
\usage{
venn_meme(
  x,
  proportional = FALSE,
  item_cex = 1,
  item_degrees = 0,
  item_buffer = -0.85,
  item_style = c("default", "marquee", "text", "gridtext"),
  keep_item_order = TRUE,
  show_items = "item",
  show_labels = "i",
  set_colors = NULL,
  plot_warning = FALSE,
  draw_legend = FALSE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{x}{\code{vector} or \code{list} containing overlap items, where
names represent overlaps. For example the name \code{"A&B"}
represents the overlap between set \code{"A"} and set \code{"B"}.
This input is passed to \code{overlaplist2setlist()}. Input \code{x}
can be a vector of single items for each overlap, or
when there are multiple items per overlap, the input \code{x}
should be a list of item vectors. Note that if a \code{setlist}
is passed to \code{overlaplist2setlist()} it will return
the \code{setlist} unchanged.}

\item{proportional, item_degrees, item_buffer, item_style, plot_warning}{arguments passed to \code{venndir()}.}

\item{item_cex}{\code{numeric} passed to \code{venndir()}, however when
\code{item_cex} is length=1, it is extended to length=2 in order
to prevent the auto-scaling adjustment typically used,
which adjusts the font size based upon the relative area
of each overlap polygon. In most cases this scaling is
not helpful for Venn memes. To enable auto-scaling, use
\code{item_cex=NULL}. See help text in \code{venndir()} for more
details.}

\item{keep_item_order}{\code{logical} default TRUE, to maintain labels
in the order they are provided for each overlap.
Use FALSE to have each label sorted using \code{jamba::mixedSort()}
for true alphanumeric sort.}

\item{plot_warning}{\code{logical} passed to \code{render_venndir()} to determine
whether to plot any warnings caused by proportional Euler diagrams
which cannot display all overlapping regions. It should not be
relevant to \code{venn_meme()} and is \code{FALSE} by default.}

\item{draw_legend}{\code{logical} indicating whether to draw the Venn diagram
legend, by default \code{FALSE} since it is not relevant to \code{venn_meme()}.
This argument is passed to \code{render_venndir()}.}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are passed to \code{venndir()}.}
}
\description{
Venn Meme or Concept Venn
}
\details{
This function is a simple wrapper to \code{venndir()} with
settings designed to create a Venn Meme. This output
is expected to display usually one or a few item labels
inside each Venn overlap region, and no other counts or
set labels.

When given a \code{character} vector or \code{list} of \code{character} vectors,
with no names, it will deduce the number of Venn sets by the
length:
\itemize{
\item 1: one set
\item up to 3: two-set Venn with overlap
\item up to 7: three-set Venn with overlaps. Effort is made for overlaps
to be defined "clockwise" starting between the first and second sets.
\item up to 15: four-set Venn, with two special cases:
\itemize{
\item up to 13 length, and when \code{proportional=TRUE}, it will create
proportional circles, showing only the 13 overlaps visibly possible.
The overlaps are recognized in order they appear, clockwise around
the center.
Use \code{venn_meme(1:13, proportional=TRUE)} to see the order.
\item up to 15 length, and/or \code{proportional=FALSE}, it will create
non-proportional ellipses.
Use \code{venn_meme(1:15)} to see the order of overlaps.
}
\item up to 31: five-set Venn with overlaps.
\itemize{
\item Use \code{venn_meme(1:31)} to see the order of overlaps.
\item As of yet, the order of overlaps is not defined clockwise.
Good luck with that!
}
}

The argument \code{item_cex} is used to adjust item font size,
and this vector is applied to items in each overlap set in order,
by the number of overlap sets, then in sorted order of the set
names in the order provided. For specific definitive ordering,
run \code{make_venn_combn_df(x)} where \code{x} is the vector of set names.
The \code{rownames} of the output will determine the order in which
\code{item_cex} is applied. In practice, use trial and error to adjust
each label to a suitable size.

The input \code{x} is intended to be a convenient method for specifying
items in each overlap set. If \code{x} has no names, then it is assumed
to represent a convenient Venn diagram based upon the length of \code{x}:
\itemize{
\item \code{length(x)} is 1, 2, or 3: two-way Venn diagram
\item \code{length(x)} is up to length 7,15,31: three-way Venn diagram
\item \code{length(x)} is up to length 15: four-way Venn diagram
\item \code{length(x)} is up to length 31: five-way Venn diagram
}

When more than three sets are represented, it may be helpful to
use a proportional Venn diagram, known as a Euler diagram,
with \code{proportional=TRUE}. Note that circular shapes cannot
always represent every overlap, and you can use proportional
ellipse shapes with \verb{proportional=TRUE, shape="ellipse"}.

When an overlap set cannot be displayed in a proportional
diagram, the default \code{plot_warning=FALSE} which means no warning
will be displayed. The intent of this function is to provide
an easy "clean" diagram.
}
\examples{
bix <- list(
   s="Stats",
   cs="Computer<br>Science",
   b="Biology",
   `s&b`="Biostatistics",
   `s&cs`="Data<br>Science",
   `cs&b`="Computational<br>Biology",
   `s&cs&b`="Bioinformatics")
venn_meme(bix, fontfamily="Futura")

# some customizations, proportional=TRUE looks better
venn_meme(bix,
   fontfamily="Futura",
   proportional=TRUE,
   outerborder="#FFFFFF99", innerborder=NA,
   rotate_degrees=360/6,
   item_cex=rep(c(2, 1.4, 2) * 1.3, c(3, 3, 1)))

# superhero?
avlist <- c(
AV="LEX<br>LUTHOR",
ML="MOUNTAIN<br>LION",
T="TODDLER",
`AV&ML`="Wants to<br>kill you",
`AV&T`="Goes off on<br>a lot of rambling<br>monologues",
`ML&T`="Resists<br>taking a bath",
`AV&ML&T`="Impossible<br>to reason with"
)
venn_meme(avlist, fontfamily="Trebuchet MS",
   set_colors=c("maroon", "goldenrod", "skyblue"),
   outerborder="white", innerborder=NA,
   item_cex=rep(c(2, 1.6, 1.3, 1.7, 1.5),
      c(3, 1, 1, 1, 1)))

# what the actual heck
wtahv <- c("What", "the", "actual", "HECK");
wtah <- (unlist(lapply(seq_along(wtahv), function(i){
   im <- t(combn(wtahv, i))
   jamba::nameVector(
      jamba::pasteByRow(sep="<br>", im),
      jamba::pasteByRow(sep="&", im))
})))
venn_meme(wtah, item_cex=0.75, fontfamily="Impact")

# circular 4-way shapes
venn_meme(wtah, proportional=TRUE, shape="circle",
   outerborder="grey45", innerborder=NA,
   item_cex=0.8, fontfamily="Impact")

# for proportional diagrams it may be helpful to use shape="ellipse"
venn_meme(wtah, proportional=TRUE, shape="ellipse",
   outerborder="white", innerborder=NA,
   fontfamily="Impact",
   item_cex_factor=0.6)

# happiness in sports
em <- list(
   a="short-lived<br>happiness",
   b="prolonged<br>suffering",
   c="sudden<br>rage",
   `a&b`="Eating<br>too much<br>spicy<br>food",
   `b&c`="Stubbing<br>your toe,<br>twice",
   `a&b&c`="Scrolling<br>through<br>X.com",
   `a&c`="Being<br>a sports<br>fan"
)
#   `a&c`="Scrolling<br>through your<br>X.com feed",
#   `a&b&c`="Being<br>a sports<br>fan"
venn_meme(em, fontfamily="Optima", item_cex_factor=0.9,
   set_colors=c("gold", "dodgerblue3", "firebrick3"))

# Mister Venn
mrvenn <- c(
sty="Style",
fh="Facial<br>Hair",
str="Strong",
t="Team",
f="Fools",
fu="Funny",
r="Rich",
`sty&fh`="Mr<br>Potato<br>Head",
`fh&str`="Mr Ed",
`str&t`="Mr<br>Incredible",
`t&f`="Mr<br>Bump",
`f&fu`="Mr<br>Bean",
`fu&r`="Mr<br>Burns",
`r&sty`="Mr<br>Peanut",
`sty&fh&str`="Mr<br>Motivator",
`fh&str&t`="Mr<br>Baseball",
`str&t&f`="Mr<br>Strong",
`t&f&fu`="Mr<br>Funny",
`f&fu&r`="Mr<br>Magoo",
`fu&r&sty`="Mr<br>Benn",
`r&sty&fh`="Mr<br>Monopoly",
`sty&fh&str&t&f&fu&r`="Mr T"
)
venn_meme(mrvenn, item_cex_factor=0.7,
   outerborder="white", innerborder=NA,
   proportional=TRUE, fontfamily="Arial Narrow")

# example of ordered item labels
item_list <- list(
   CLE=(c("**Cutaneous Lupus**:",
      "IFN⍺ > IFNβ",
      "Anti-malarials effective  \ntherapy for  \nskin disease")),
   DM=(c("**Dermatomyositis**:",
      "IFNβ > IFN⍺",
      "Triggered by  \nimmune stimulating  \nherbal supplements.  \n.  \n",
      "  \nAnti-malarials  \neffective in 25\%, but  \ncommon morbilliform rash  \n",
      "  \nCannabinoid receptor  \nagonist treatment"
      )),
   `CLE&DM`=(c(
      "Photosensitivity",
      "Triggered by viral &\nbacterial infections",
      "Increased\ntype I IFN")))
vo <- venndir::venn_meme(x=item_list,
   fontfamily="PT Sans Narrow",
   outerborder="white", innerborder="white",
   item_cex=c(1.3, 1.2, 1.3),
   item_buffer=c(-0.5, -0.2, -0.75),
   set_colors=c("darkorchid4", "gold"),
   poly_alpha=0.5,
   xyratio=5, spread=TRUE,
   jitter_cex=0)

}
\seealso{
Other venndir core: 
\code{\link{render_venndir}()},
\code{\link{textvenn}()},
\code{\link{venndir}()}
}
\concept{venndir core}
