% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/venndir-legend.R
\name{venndir_legender}
\alias{venndir_legender}
\title{Add optional legend to venndir figures (developmental)}
\usage{
venndir_legender(
  setlist,
  x = "bottomleft",
  venndir_out = NULL,
  box.lwd = 0,
  style = c("grid", "base", "data.frame"),
  item_type = "",
  header_color = "#000000",
  header_bg = "#FFFFFF",
  header_border = "#FFFFFF",
  lwd = 1,
  x_inset = grid::unit(2, "lines"),
  y_inset = grid::unit(2, "lines"),
  font_cex = 1,
  table_theme = NULL,
  draw_legend = TRUE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{setlist}{\code{list} used as input to \code{venndir()}, which is used
only to derive the number of elements.}

\item{x}{\code{character} string indicating the position of the legend,
as passed to \code{graphics::legend()} when \code{style="base"}.}

\item{venndir_out}{\code{list} object returned by \code{venndir()}, which is used
to generate the legend counts. When supplied, the \code{set_colors} are
also defined by this object.}

\item{box.lwd}{\code{numeric} used to define the box line width,
as passed to \code{graphics::legend()} when \code{style="base"}.}

\item{style}{\code{character} string indicating the style of legend:
\itemize{
\item \code{"base"} uses \code{graphics::legend()}
\item \code{"grid"} uses \code{gridExtra::grid.table()}
\item \code{"data.frame"} only returns the venndir legend \code{data.frame}.
}}

\item{item_type}{\code{character} string used as a suffix to the counts
displayed in the legend. Use \code{item_type=""} or \code{item_type=NULL}
to hide this suffix.}

\item{header_color, header_bg, header_border}{\code{character} R colors
to define colors for particular elements:
\itemize{
\item \code{header_color} defines the text color of the column headers.
To hide the column header, currently use \code{header_color="white"},
matching whatever color is used for \code{header_bg}.
\item \code{header_bg} defines the background fill color for the column headers.
\item \code{header_border} defines the border color for the header, which
is also applied to all cells in the table. Note that the line is
drawn with line width \code{lwd}.
}}

\item{lwd}{\code{numeric} value for line width used for the cell border
in the legend table, when \code{style="grid"}.}

\item{x_inset, y_inset}{\code{grid::unit} object that defines the inset
distance away from each plot edge, along the x-axis and y-axis,
respectively. For example \code{x_inset=grid::unit(2, "lines")} will
place the legend table 2 character lines (which are defined by
line height for typical character size) away from the left or
right edge of the plot. Any valid \code{grid::unit} can be used, however
using \code{"lines"} units provides some consistent width rather
than using \code{"npc"} in terms of fraction of overall plot width
or height.}

\item{font_cex}{\code{numeric} adjustment to default font sizes. The default
font size with \code{style="grid"} uses a 12 point font, so to adjust
to a specific font size like 8 points, use: \code{font_cex=8/12}}

\item{table_theme}{\code{list} of theme parameters as described in
\code{gridExtra::tableGrob()}, and \code{gridExtra::ttheme_default()}.
When supplied, the \code{font_cex} argument is ignored.
The \code{list} components include:
\itemize{
\item \code{base_size} - default font size
\item \code{base_colour} - default font color
\item \code{base_family} - default font family
\item \code{parse} - \code{logical} whether to parse plotmath expressions
\item \code{padding} - \code{grid::unit()} for horizontal and vertical padding
within each cell
}}

\item{draw_legend}{\code{logical} indicating whether to draw the resulting
legend. Because this function is in development, the \code{style="grid"}
seems to be preferred, however it may be useful to return the
\code{grob} object for manipulation before rendering inside the active
plot. In that case, use arguments: \verb{style="grid", draw_legend=FALSE}.}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are passed to subsequent functions.}
}
\value{
\code{data.frame} with legend information is returned invisibly,
unless using \verb{style="grid", draw_legend=FALSE} in which case the
legend \code{grob} object is returned which can then be manipulated
before rendering.
}
\description{
Add optional legend to venndir figures (developmental). This function
is being evaluated and developed, and will very likely change
again in an upcoming release.
}
\details{
Note this function is experimental and is under active development. The
implementation and arguments may change in future.

Limitations: Currently this function relies upon having the \code{setlist}
used to produce the \code{venndir()} output, and the \code{venndir()} output.
In future, the \code{setlist} could be derived from the \code{venndir()} output
object directly. That step likely needs a new function.

When using arguments \code{style="grid"} and \code{draw_legend=FALSE} the
\code{grid} \code{grob} object is returned, so that it can be manipulated
as needed before rendering. Note that in this case, the viewport
will have already been defined and stored into \code{legend_grob$vp}
with x position \code{legend_grob$vp$x} and y position \code{legend_grob$vp$y}.
Total legend width is: \code{sum(legend_grob$widths)}, and
total legend height is: \code{sum(legend_grob$heights)}.
}
\examples{
setlist <- make_venn_test(100, 3, do_signed=TRUE);
vo <- venndir(setlist)

venndir_legender(setlist=setlist,
   venndir_out=vo,
   x="bottomleft")

# base legend bottom-right
venndir_legender(setlist=setlist,
   venndir_out=vo,
   style="base",
   x="bottomright")

vo <- venndir(setlist,
   show_segments=FALSE,
   plot_style="gg")
venndir_legender(setlist=setlist,
   venndir_out=vo,
   style="grid",
   x="bottomleft")

# test multi-line labels
names(setlist) <- c("Group A-<br>Group B",
   "Group B-<br>\nGroup C",
   "Dex_KO-\nVeh_WT")
vo <- venndir(setlist,
   show_segments=FALSE,
   plot_style="gg")
venndir_legender(setlist=setlist,
   venndir_out=vo,
   style="grid",
   x="bottomleft")

# Same as above, showing how to render the legend_grob.
# This method also "hides" the column headers.
vo <- venndir(setlist,
   show_segments=FALSE,
   font_cex=c(1, 1, 0.5, 0.5),
   plot_style="gg")
legend_grob <- venndir_legender(setlist=setlist,
   venndir_out=vo,
   style="grid",
   draw_legend=FALSE,
   header_color="white",
   x="bottomright")
grid::grid.draw(legend_grob)

# custom grid table theme
vo <- venndir(setlist,
   show_segments=FALSE,
   plot_style="gg")
legend_grob <- venndir_legender(setlist=setlist,
   venndir_out=vo,
   headers=FALSE,
   style="grid",
   x="bottomright",
   table_theme=gridExtra::ttheme_default(base_size=11,
      base_family="sans",
      padding=grid::unit(c(2, 2), "mm")))

}
\seealso{
Other venndir utility: 
\code{\link{curate_venn_labels}()},
\code{\link{eulerr2polys}()},
\code{\link{expand_range}()},
\code{\link{find_vennpoly_overlaps}()},
\code{\link{get_venn_shapes}()},
\code{\link{gridtext_make_outer_box}()},
\code{\link{gridtext_richtext_grob}()},
\code{\link{make_color_contrast}()},
\code{\link{make_venn_combn_df}()},
\code{\link{make_venn_test}()},
\code{\link{match_list}()},
\code{\link{nudge_venndir_label}()},
\code{\link{print_color_df}()},
\code{\link{rescale_ps}()},
\code{\link{rescale_p}()},
\code{\link{shrink_df}()},
\code{\link{sp_percent_area}()},
\code{\link{venndir_label_style}()}
}
\concept{venndir utility}
