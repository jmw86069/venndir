% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/JamPolygon.R
\name{sample_JamPolygon}
\alias{sample_JamPolygon}
\title{Sample points within JamPolygon}
\usage{
sample_JamPolygon(
  jp,
  n = 100,
  xyratio = 1.1,
  spread = FALSE,
  pattern = c("offset", "rectangle"),
  buffer = 0,
  byCols = c("-y", "x"),
  do_plot = FALSE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{jp}{\code{JamPolygon}}

\item{n}{\code{integer} number of points required}

\item{xyratio}{\code{numeric} adjustment for the x/y ratio, numbers larger than
1 make the x-axis spacing larger than the y-axis spacing.}

\item{spread}{\code{logical} when more then \code{n} points can be fit inside
\code{jp}, \code{spread=TRUE} spreads the points evenly across the available
points, while \code{spread=FALSE} only takes the first \code{n} points.}

\item{byCols}{\code{character} passed to \code{jamba::mixedSortDF()} to determine
how to sort the resulting coordinates. Default \code{byCols=c("-y", "x")}
sorts top-to-bottom, then left-to-right.}

\item{do_plot}{\code{logical} indicating whether to create a plot to illustrate
the process.}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}
}
\description{
Sample points within JamPolygon
}
\details{
This function arrays points across solid portions of polygons
provided in \code{jp}.
\subsection{Todo:}{
\enumerate{
\item Enable polygon buffer to guarantee minimum spacing from borders.
\item Allow different spatial patterns, currently square or rectangular.
In future, consider hexagonal, diamond, or diagonal.
}
}
}
\examples{
df3 <- data.frame(name=c("polygon1", "polygon2"),
   label=c("polygon1", "polygon2"),
   x=I(list(
      list(c(1, 6, 6, 1),
         c(2, 5, 5, 2),
         c(3, 4, 4, 3)),
      list(#c(11, 16, 16, 11),
         c(12, 15, 15, 12),
         c(13, 14, 14, 13))
      )),
   y=I(list(
      list(c(1, 1, 6, 6),
         c(2, 2, 5, 5),
         c(3, 3, 4, 4)),
      list(#c(1, 1, 6, 6),
         c(2, 2, 5, 5),
         c(3, 3, 4, 4))
      )),
   fill=c("gold", "firebrick"))
jp3 <- new("JamPolygon", polygons=df3);

sample_JamPolygon(jp3[1,], n=40, do_plot=TRUE)
sample_JamPolygon(jp3[1,], n=80, do_plot=TRUE)

sample_JamPolygon(jp3[1,], n=40, xyratio=1.5, do_plot=TRUE)

sample_JamPolygon(jp3[1,], n=40, xyratio=1/1.5, do_plot=TRUE)

}
