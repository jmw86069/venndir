% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/JamPolygon.R
\name{sample_JamPolygon}
\alias{sample_JamPolygon}
\title{Sample points within JamPolygon}
\usage{
sample_JamPolygon(
  jp,
  n = 100,
  xyratio = 1.2,
  spread = FALSE,
  n_ratio = 1,
  pattern = c("offset", "columns"),
  buffer = -0.2,
  width_buffer = 0.1,
  max_width_buffer = 10,
  byCols = c("-y", "x"),
  algorithm = c("split", "seq"),
  do_plot = FALSE,
  n_seq = NULL,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{jp}{\code{JamPolygon}}

\item{n}{\code{integer} number of points required}

\item{xyratio}{\code{numeric} adjustment for the x/y ratio, numbers larger than
1 make the x-axis spacing larger than the y-axis spacing.}

\item{spread}{\code{logical} (default \code{FALSE}) when more then \code{n} points are
defined than the target number of points, \code{spread} indicates whether
the subset of \code{n} points returned is defined using the first \code{n}
points (spread=FALSE) or an even spread from start to end (spread=TRUE),
\itemize{
\item \code{spread=TRUE} can produce unusual distributions, with potential
improvementwhen filling an irregular polygon.
\item \code{spread=FALSE} produces more "regular" placement of labels, also
without gaps.
}}

\item{n_ratio}{\code{numeric} ratio which must be \code{1} or higher, default 1,
how many total valid points should be defined before choosing
a subset of points to use.
\itemize{
\item \code{n_ratio=1} - defines \code{n} points as closely as possible.
\item \code{n_ratio=2} - defines twice the points, then takes a subset
to use, based upon argument \code{spread}. It may be beneficial when
trying to fill an irregularly shaped polygon to use a higher
\code{n_ratio}, thereby forcing the discovery of many more possible
points. That said, the subset of points may not be "ideally"
distributed relative to other labels, and relative to the polygon
shape.
}}

\item{pattern}{\code{character} string indicating how to array the points:
\itemize{
\item \code{"offset"} (default) uses a rectangular grid where alternating
points on each row are offset slightly on the y-axis.
\item \code{"columns"} uses a rectangular grid with points on each row
that share the same y-axis value. Essentially the same as "offset"
using offset=0.
}}

\item{buffer}{\code{numeric} optional buffer used to adjust the \code{jp} polygon
size overall, where negative values will slightly shrink the
polygon border. Points are sampled after this adjustment.}

\item{byCols}{\code{character} passed to \code{jamba::mixedSortDF()} to determine
how to sort the resulting coordinates. Default \code{byCols=c("-y", "x")}
sorts top-to-bottom, then left-to-right.}

\item{algorithm}{\code{character} string, default "split"
\itemize{
\item \code{"split"}: newer approach that starts with large step increases in \code{n},
then subdivides between failure/success to find the optimal final \code{n}.
During testing it was substantially faster and more accurate than
the previous algorithm \code{"seq"}.
\item \code{"seq"}: attempts a linear sequence of \code{n} values with gradual
increases. It may be slightly more accurate, always finding the lowest
value, at the expense of brute force speed.
}}

\item{do_plot}{\code{logical} indicating whether to create a plot to illustrate
the process.}

\item{n_seq}{\code{numeric}, default NULL, used to provide a custom sequence
of \code{n} values to attempt, used for internal testing but may be useful
to provide exact values determined by an external approach.}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}
}
\description{
Sample points within JamPolygon
}
\details{
This function arrays points across solid portions of polygons
provided in \code{jp}.
\subsection{Todo:}{
\enumerate{
\item Enable polygon buffer to guarantee minimum spacing from borders.
\item Allow different spatial patterns, currently square or rectangular.
In future, consider hexagonal, diamond, or diagonal.
}
}
}
\examples{
df3 <- data.frame(name=c("polygon1", "polygon2"),
   label=c("polygon1", "polygon2"),
   x=I(list(
      list(c(1, 6, 6, 1),
         c(2, 5, 5, 2),
         c(3, 4, 4, 3)),
      list(#c(11, 16, 16, 11),
         c(12, 15, 15, 12),
         c(13, 14, 14, 13))
      )),
   y=I(list(
      list(c(1, 1, 6, 6),
         c(2, 2, 5, 5),
         c(3, 3, 4, 4)),
      list(#c(1, 1, 6, 6),
         c(2, 2, 5, 5),
         c(3, 3, 4, 4))
      )),
   fill=c("gold", "firebrick"))
jp3 <- new("JamPolygon", polygons=df3);

sample_JamPolygon(jp3[1,], n=40, do_plot=TRUE)
sample_JamPolygon(jp3[1,], n=40, do_plot=TRUE, spread=TRUE)
sample_JamPolygon(jp3[1,], n=40, do_plot=TRUE, algorithm="seq")
sample_JamPolygon(jp3[1,], n=40, do_plot=TRUE, algorithm="seq", spread=TRUE)

sample_JamPolygon(jp3[1,], n=60, buffer=-0.3, spread=FALSE, do_plot=TRUE, xyratio=0.6)
sample_JamPolygon(jp3[1,], n=60, buffer=-0.3, spread=FALSE, do_plot=TRUE, xyratio=0.6, algorithm="seq")

sample_JamPolygon(jp3[1,], n=40, do_plot=TRUE, pattern="columns")

}
\seealso{
Other JamPolygon: 
\code{\link{JamPolygon-class}},
\code{\link{Venndir-class}},
\code{\link{[,JamPolygon,ANY,ANY,ANY-method}},
\code{\link{add_orientation_JamPolygon}()},
\code{\link{area_JamPolygon}()},
\code{\link{bbox_JamPolygon}()},
\code{\link{buffer_JamPolygon}()},
\code{\link{check_JamPolygon}()},
\code{\link{check_Venndir}()},
\code{\link{eulerr_to_JamPolygon}()},
\code{\link{farthest_point_JamPolygon}()},
\code{\link{find_venn_overlaps_JamPolygon}()},
\code{\link{has_point_in_JamPolygon}()},
\code{\link{intersect_JamPolygon}()},
\code{\link{label_fill_JamPolygon}()},
\code{\link{label_outside_JamPolygon}()},
\code{\link{label_segment_JamPolygon}()},
\code{\link{labelr_JamPolygon}()},
\code{\link{minus_JamPolygon}()},
\code{\link{nearest_point_JamPolygon}()},
\code{\link{nudge_JamPolygon}()},
\code{\link{plot.JamPolygon}()},
\code{\link{point_in_JamPolygon}()},
\code{\link{polyclip_to_JamPolygon}()},
\code{\link{polygon_circles}()},
\code{\link{polygon_ellipses}()},
\code{\link{split_JamPolygon}()},
\code{\link{union_JamPolygon}()},
\code{\link{update_JamPolygon}()}
}
\concept{JamPolygon}
