% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/venndir-assemble-label.R
\name{assemble_venndir_label}
\alias{assemble_venndir_label}
\title{Assemble grid grobs into venndir labels}
\usage{
assemble_venndir_label(
  x = NULL,
  y = NULL,
  just = c("center", "center"),
  signed_labels = NULL,
  count_labels = NULL,
  overlap_labels = NULL,
  template = c("wide", "tall"),
  fontfamily = "Helvetica",
  fontfamilies = list(signed = fontfamily, count = fontfamily, overlap = fontfamily),
  fontsizes = list(signed = 12, count = c(16, 12), overlap = 16),
  fontfaces = list(signed = "plain", count = c("plain", "bold.italic"), overlap = "bold"),
  fontcolors = list(signed = c("red3", "dodgerblue3", "grey55"), count = "black", overlap
    = "black"),
  label_borders = list(signed = grid::unit(1, "mm"), count = grid::unit(2, "mm"), overlap
    = grid::unit(3, "mm")),
  do_frame = TRUE,
  frame_r = grid::unit(0.1, "snpc"),
  frame_border = "#44444477",
  frame_fill = "#FDDD6644",
  text_grob_type = c("textGrob", "marquee", "richtext_grob"),
  debug = FALSE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{x, y}{\code{grid::unit}, default NULL, indicating optional placement
of labels. When defined, a viewport is defined for the label so
it is rendered at this position.}

\item{just}{\code{character} used only when \code{x},\code{y} are defined, default
"center" places the label at the center position; "right" will align
the label so the right edge touches the x,y coordinate;
\code{c("bottom", "left")} will align the label so the bottom-left corner
touches the x,y coordinate.}

\item{signed_labels, count_labels, overlap_labels}{\code{character} vector,
default NULL, with one or more entries indicating the label should
be included.}

\item{template}{\code{character} default "wide" indicating the placement
of counts and signed counts when both are defined:
\itemize{
\item \code{"wide"} places signed counts to the right of counts.
\item \code{"tall"} places signed counts below counts.
}}

\item{fontfamily}{\code{character} default "Helvetica" used as convenient
default for \code{fontfamilies}.}

\item{fontfamilies, fontsizes, fontfaces, fontcolors, label_borders}{\code{list}
with three named elements: "overlap", "count", "signed", providing
one or more values for each type of label. When multiple values
are provided for a label type, these values are recycled to the
number of values.
\itemize{
\item For example \code{signed_labels=c("^ 21", "v 24")}
and \code{fontcolors=list(signed=c("red", "blue", "grey"))} would use
\code{c("red", "blue")} for these two labels.
\item The \code{label_borders} values refer to the border "buffer whitespace"
between adjacent labels for each type, line by line.
By default: 1mm between signed labels; 2mm between count labels;
3mm between overlap labels.
}}

\item{do_frame}{\code{logical} default TRUE, indicating whether to define
a frame around the grouped labels, returning \code{grid::gTree} with the
frame and labels together as one "grob".}

\item{frame_r}{\code{grid::unit} default 0.1snpc, indicating the corner
radius when \code{do_frame=TRUE}, causing it to use \code{grid::roundrectGrob()}
instead of \code{grid::rectGrob()}. Note the default is proportional to
the plot coordinates, not the font size.}

\item{frame_border, frame_fill}{\code{character} R colors used when
\code{do_frame=TRUE} for the frame border, and color fill, respectively.
Default is black border, cream/beige fill.}

\item{text_grob_type}{\code{character} default \code{"textGrob"} indicating the
type of text grob to use for labels. In future, this choice should
be substantially improved, but for now it is user choice.
\itemize{
\item \code{"textGrob"} uses \code{grid::textGrob()} - solid all-around, however
it does not support markdown.
\item \code{"marquee"} uses \code{marquee::marquee_grob()} - best overall:
Supports markdown, and fallback glyph use so up/down arrows are
displayed even for fonts that do not include them.
Not compatible with MacOS and R-4.4.1 or older, so it will revert
to \code{"textGrob"} in that specific scenario.
\item \code{"richtext_grob"} uses \code{gridtext::richtext_grob()} - solid
alternative for markdown support, however some graphics devices show
inconsistent spacing between words.
}}

\item{debug}{\code{character} default FALSE, indicating whether to run
one of the debug modes used for testing:
\itemize{
\item \code{"overlap"} will display the label at the center of the plot.
\item \code{"groblist"} will return a \code{list} of grobs: signed_grobs, count_grobs,
overlap_grobs.
\item \code{"list"} will return a \code{list} of grobs as "groblist", then the
\code{overlap_frame} which contains the \code{gTree} or \code{gtable} final grob.
}}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}
}
\description{
Assemble grid grobs into venndir labels
}
\details{
Grobs are defined by \code{signed_labels}, \code{count_labels}, and \code{overlap_labels},
or when any argument is \code{NULL} the label is skipped.
The labels are assembled with the following rules:
\itemize{
\item For each of the labels, when multiple values are provided, they are
stacked on top of each other.
\itemize{
\item For \code{signed_labels}, they are left-justified when \code{template="wide"},
otherwise they and all other labels are center-justified.
}
\item When both \code{count_labels} and \code{signed_labels} are defined, they
are combined according to \code{template}:
\itemize{
\item \code{template="wide"}: combines \code{count_labels} on the left, and
\code{signed_labels} on the right. They are center/middle-justified
relative to each other, in terms of height.
\item \code{template="tall"}: combines \code{count_labels} on the top, and
\code{signed_labels} on the bottom.
}
\item The combined labels of \code{count_labels} and/or \code{signed_labels}
are arranged  center-justified underneath \code{overlap_labels},
when \code{overlap_labels} is defined.
\item For each label, the font settings are applied in order, or recycled
to the vector length. For example if \code{signed_labels} contains three
values, then \code{fontsizes$signed} is recycled to length 3, and applied
to each label in order.
\itemize{
\item \code{fontsizes}: applies to each label in order
\item \code{fontfamilies}: by default uses \code{fontfamily} for all labels, but
permits any label to use a custom font
\item \code{fontfaces}: applies fontface to each label in order, with recognized
values: "plain", "bold", "italic", "bold.italic"
\item \code{fontcolors}: applies font color to each label in order
}
}
}
\examples{
pdf.options(encoding="ISOLatin1.enc")
vl <- assemble_venndir_label(
   signed_labels=c("\u2191\u2191 15",
      "\u2193\u2193 23"),
   debug="overlap")

pdf.options(encoding="ISOLatin2.enc")
vl <- assemble_venndir_label(
   overlap_labels=c("\u2191\u2191 15",
      "\u2193\u2193 23")[1],
   debug="overlap")
   
vl2 <- assemble_venndir_label(
   signed_labels=c("\u2191\u2191 15",
      "\u2193\u2193 23"),
   count_labels=c("38"),
   debug="overlap")

vl3 <- assemble_venndir_label(
   signed_labels=c("\u2191\u2191 15",
      "\u2193\u2193 23"),
   count_labels=c("38"),
   overlap_labels="Set Name Goes Here",
   debug="overlap")

vl4 <- assemble_venndir_label(template="wide",
   signed_labels=c("\u2191\u2191 15",
      "\u2193\u2193 23"),
   count_labels=c("38", "12\%"),
   overlap_labels="Set Name Goes Here",
   debug="overlap")

vl5 <- assemble_venndir_label(
   signed_labels=c("\u2191\u2191 15",
      "\u2191\u2193 8",
      "\u2193\u2193 23"),
   fontcolors=list(signed=c("red3", "darkorchid", "dodgerblue3")),
   count_labels=c("46", "12\%"),
   overlap_labels="Set Name Goes Here",
   debug="overlap")

vl6 <- assemble_venndir_label(
   signed_labels=c("\u2191\u2191 15",
      "\u2193\u2193 23"),
   #count_labels=c("38", "12\%"),
   overlap_labels="Set Name Goes Here",
   debug="overlap")

# example preparing multiple labels, one at a time
vlxy1 <- assemble_venndir_label(fontfamily="Times",
   just="right",
   x=grid::unit(0.25, "snpc"), grid::unit(0.5, "snpc"),
   count_labels=c("138"),
   signed_labels=c("\u2191\u2191 15",
      "\u2193\u2193 23"))
vlxy2 <- assemble_venndir_label(template="wide",
   just=c("right", "top"),
   x=grid::unit(0.25, "snpc"), grid::unit(0.25, "snpc"),
   count_labels=c("101", "24\%"),
   signed_labels=c("\u2191\u2191 27",
      "\u2193\u2193 74"))

# each label can be drawn individually, or combined into gList (below)
new_gtree <- grid::gTree(children=grid::gList(
   vlxy1, vlxy2))
grid::grid.newpage();
grid::grid.draw(new_gtree);
grid::grid.points(x=grid::unit(c(0.25, 0.25), "snpc"),
   y=grid::unit(c(0.50, 0.25), "snpc"),
   pch=3,
   gp=grid::gpar(cex=0.8, lwd=2, col="darkorange"));

pdf.options(encoding="ISOLatin1.enc")

}
\concept{venndir label}
