% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/venndir-label-fill-jp.R
\name{label_fill_JamPolygon}
\alias{label_fill_JamPolygon}
\title{Arrange text labels inside a polygon}
\usage{
label_fill_JamPolygon(
  jp,
  labels,
  buffer = -0.15,
  relative = TRUE,
  color = "black",
  border = NA,
  ref_jp = NULL,
  xyratio = 1.1,
  fontsize = 10,
  cex = 1,
  degrees = 0,
  dither_cex = 0.04,
  dither_color = 0.07,
  dither_degrees = 0,
  scale_width = -0.15,
  apply_n_scale = TRUE,
  buffer_w = 0,
  buffer_h = 0,
  label_method = c("hexagonal"),
  layout_degrees = -20,
  draw_buffer = FALSE,
  buffer_fill = "#FFFFFF77",
  buffer_border = "red",
  draw_points = FALSE,
  draw_labels = TRUE,
  seed = 1,
  plot_style = c("base", "gg", "none"),
  verbose = FALSE,
  ...
)
}
\arguments{
\item{jp}{\code{JamPolygon} where only the first row is processed.}

\item{labels}{\code{character} vector of labels}
}
\description{
Arrange text labels inside a polygon
}
\details{
This function is intended to define points inside a polygon area
which are evenly spaced, used to place text labels also inside
the polygon. There are limited options to define a buffer region
so that labels do not overlap the polygon boundary.
\subsection{Strategy}{
\itemize{
\item Determine bounding box with rectangular area that encompases the polygon.
\item Define evenly spaced points across the rectangular area sufficient
to produce at least \code{n} total points.
\item Retain only the subset of points which are inside the polygon.
\item If there are fewer than \code{n} remaining points, repeat the process
using a higher target value for \code{n}.
}

Challenges:
\itemize{
\item \code{polyclip::pointinpolygon()} does not appear to handle polygons with
holes. If not, then we have to use logic like: "overlaps any solid polygon,
does not overlap any polygon hole".
}

Options:
\itemize{
\item Consider applying a buffer with fixed width inside the original
polygon, so that points have at least this minimum width to the
polygon border.
\item Bonus points for applying the buffer more to the width than height,
since text labels are typically wider than they are tall.
}
}
}
\examples{
df3 <- data.frame(name=c("polygon1", "polygon2"),
   label=c("polygon1", "polygon2"),
   x=I(list(
      list(c(1, 6, 6, 1),
         c(2, 5, 5, 2),
         c(3, 4, 4, 3)),
      list(#c(11, 16, 16, 11),
         c(12, 15, 15, 12),
         c(13, 14, 14, 13))
      )),
   y=I(list(
      list(c(1, 1, 6, 6),
         c(2, 2, 5, 5),
         c(3, 3, 4, 4)),
      list(#c(1, 1, 6, 6),
         c(2, 2, 5, 5),
         c(3, 3, 4, 4))
      )),
   fill=c("gold", "firebrick"))
jp3 <- new("JamPolygon", polygons=df3);
plot(jp3);

label_fill_JamPolygon(jp3[1,], labels=1:20)
test_x <- jp3[1,]@polygons$x[[1]];
test_y <- jp3[1,]@polygons$y[[1]];
P <- list(x=c(3.5, 4.5), y=c(3.5, 4.5))
A <- lapply(seq_along(test_x), function(i){
   list(x=test_x[[i]], y=test_y[[i]])})

}
\seealso{
Other JamPolygon: 
\code{\link{JamPolygon-class}},
\code{\link{Venndir-class}},
\code{\link{add_orientation_JamPolygon}()},
\code{\link{area_JamPolygon}()},
\code{\link{bbox_JamPolygon}()},
\code{\link{buffer_JamPolygon}()},
\code{\link{check_JamPolygon}()},
\code{\link{check_Venndir}()},
\code{\link{eulerr_to_JamPolygon}()},
\code{\link{farthest_point_JamPolygon}()},
\code{\link{find_venn_overlaps_JamPolygon}()},
\code{\link{has_point_in_JamPolygon}()},
\code{\link{intersect_JamPolygon}()},
\code{\link{label_outside_JamPolygon}()},
\code{\link{label_segment_JamPolygon}()},
\code{\link{labelr_JamPolygon}()},
\code{\link{minus_JamPolygon}()},
\code{\link{nearest_point_JamPolygon}()},
\code{\link{plot,JamPolygon,missing-method}},
\code{\link{plot.JamPolygon}()},
\code{\link{point_in_JamPolygon}()},
\code{\link{polyclip_to_JamPolygon}()},
\code{\link{sample_JamPolygon}()},
\code{\link{split_JamPolygon}()},
\code{\link{union_JamPolygon}()},
\code{\link{update_JamPolygon}()}
}
\concept{JamPolygon}
