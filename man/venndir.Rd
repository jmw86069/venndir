% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/venndir-base-polyclip.R
\name{venndir}
\alias{venndir}
\title{Directional Venn diagram}
\usage{
venndir(
  setlist,
  overlap_type = c("detect", "concordance", "each", "overlap", "agreement"),
  sets = NULL,
  set_colors = NULL,
  setlist_labels = NULL,
  legend_labels = NULL,
  draw_legend = TRUE,
  legend_font_cex = 1,
  proportional = FALSE,
  show_labels = "Ncs",
  main = NULL,
  return_items = TRUE,
  show_items = c(NA, "none", "sign item", "sign", "item"),
  max_items = 3000,
  show_zero = FALSE,
  font_cex = c(1, 1, 0.7),
  fontfamily = "Arial",
  show_label = NA,
  display_counts = TRUE,
  poly_alpha = 0.6,
  alpha_by_counts = FALSE,
  label_style = c("basic", "fill", "shaded", "shaded_box", "lite", "lite_box"),
  label_preset = "none",
  template = c("wide", "tall"),
  unicode = TRUE,
  big.mark = ",",
  curate_df = NULL,
  venn_jp = NULL,
  inside_percent_threshold = 0,
  item_cex = 1,
  item_style = c("default", "text", "gridtext"),
  item_buffer = -0.15,
  item_degrees = 0,
  sign_count_delim = " ",
  padding = c(3, 2),
  r = 2,
  center = c(0, -0.15),
  segment_distance = 0.1,
  segment_buffer = -0.1,
  show_segments = TRUE,
  sep = "&",
  do_plot = TRUE,
  verbose = FALSE,
  debug = 0,
  circle_nudge = NULL,
  lwd = 1,
  rotate_degrees = 0,
  ...
)
}
\arguments{
\item{setlist}{\code{list} of named vectors, whose names represent
set items, and whose values represent direction using
values \code{c(-1, 0, 1)}.}

\item{overlap_type}{\code{character} value indicating the type of
overlap logic:
\itemize{
\item \code{"each"} records each combination of signs;
\item \code{"overlap"} disregards the sign and returns any match
item overlap;
\item \code{"concordance"} represents counts for full
agreement, or \code{"mixed"} for any inconsistent overlapping
direction;
\item \code{"agreement"} represents full agreement in direction
as \code{"agreement"}, and \code{"mixed"} for any inconsistent
direction.
}}

\item{sets}{\code{integer} index with optional subset of sets in \code{setlist}
for the Venn diagram.
This option is useful when defining consistent \code{set_colors} for
all entries in \code{setlist}.}

\item{set_colors}{\code{character} vector of R colors, or default \code{NULL} to
use categorical colors defined by \code{colorjam::rainbowJam()}.
It will generate colors for every element in \code{setlist} even when
a subset is defined with \code{sets}.}

\item{setlist_labels}{\code{character} vector with optional custom labels
to display in the Venn diagram. This option is intended when
the \code{names(setlist)} are not suitable for display, but should
still be maintained as the original names.}

\item{legend_labels}{\code{character} vector with optional custom labels
to display in the Venn legend. This option is intended when
the \code{names(setlist)} are not suitable for a legend, but should
still be maintained as the original names.
The legend labels are typically single-line entries and should
have relatively short text length.}

\item{draw_legend}{\code{logical} passed to \code{render_venndir()}, and stored
in the \code{Venndir} metadata.}

\item{legend_font_cex}{\code{numeric} scalar, default 1, used to adjust
the relative size of fonts with \code{venndir_legender()} when
\code{draw_legend=TRUE}. This value is stored in \code{metadata} for persistence.}

\item{proportional}{\code{logical} (default FALSE) indicating whether
to draw proportional Venn circles, also known as a Euler diagram.
Proportional circles are not guaranteed to represent all possible
overlaps. Proportional circles are determined by calling
\code{eulerr::eulerr()}.
Use \code{shape="ellipse"} for \code{eulerr()} to provide elliptical shapes.}

\item{show_labels}{\code{character} string to define the labels to display,
and where they should be displayed.
The definition uses a single letter to indicate each type of label
to display, using UPPERCASE to display the label outside the Venn shape,
and lowercase to display the label inside the Venn shape.
The default \code{"Ncs"} displays _N_ame (outside), _c_ount (inside),
and _s_igned count (inside).

The label types are defined below:
\itemize{
\item _N_ame: "n" or "N" - the set name, by default it is displayed.
\item _O_verlap: "o" or "O" - the overlap name, by default it is hidden,
because these labels can be very long, also the overlap should be
evident in the Venn diagram already.
\item _c_ount: "c" or "C" - overlap count, independent of the sign
\item _p_ercentage: "p" or "P" - overlap percentage, by default hidden,
but available as an option
\item _s_igned count: "s" or "S" - the signed overlap count, tabulated
based upon \code{overlap_type} ("each", "concordant", "agreement", etc/)
\item _i_tems: "i" only, by default hidden. When enabled, item labels
defined by \code{show_items} are spread across the specific Venn overlap
region.
}}

\item{main}{\code{character} string used as a plot title, default NULL
will render no title. When provided, it is rendered using
\code{gridtext::richtext_grob()} which enables some Markdown-style
formatting. The title is stored in \code{venndir@metadata$main}
for persistence.}

\item{return_items}{\code{logical} (default TRUE) indicating whether to
return items in the overlap data. When \code{FALSE} item labels also
cannot be displayed in the figure.
The main reason not to return items is to conserve memory, for
example if \code{setlist} is extremely large.}

\item{show_items}{\code{character} used to define the item label,
only used when the \code{show_label} entry includes \code{"i"} which
enables item display inside the Venn diagram.
\itemize{
\item \code{"item"}: shows only the item labels
\item \code{"sign"}: shows only the sign of each item
\item \code{"sign items"}: shows the sign and item together
(or \code{"item sign"} will show the item, then the sign).
}}

\item{max_items}{\code{numeric} (default 3000) indicating the maximum number
of item labels to display when enabled.}

\item{show_zero}{\code{logical} (default FALSE) indicating whether empty
overlaps are labeled with count zero \code{0}. When \code{show_zero=TRUE} the
count zero label is displayed, otherwise no count label is shown.}

\item{font_cex}{\code{numeric} vector recycled and applied in order:
\enumerate{
\item Set label
\item Overlap count label
\item Signed count label
}

The default \code{c(1, 1, 0.7)} defines the signed count label slightly
smaller than other labels.
\itemize{
\item When one value is provided, it is multiplied by \code{c(1, 1, 0.7)} to
adjust font sizes altogether, keeping relative sizes.
\item When two values are provided, they are multiplied by \code{c(1, 1, 0.7)}
using the second value twice.
\item When three values are provided, they are used as-is without change.
}}

\item{fontfamily}{\code{character} string to define the fontfamily.
The \code{fontfamily} must match a recognized font for the given output
device, and this font must be capable of producing UTF-8 / Unicode
characters, in order to print up arrow and down arrow.
You may review \code{systemfonts::system_fonts()} for a listing of fonts
recognized by \code{ragg} devices, which seems to have the best
overall font capabilities.
When it does not work, either use \code{unicode=FALSE}, or check the
output from \code{Sys.getlocale()} to ensure the setting is capable
of using UTF-8 (for example "C" may not be sufficient).
Using the package \code{ragg} appears to be more consistently successful
for rasterized output than base R output, for example:
\code{ragg::agg_png()}, \code{ragg::agg_tiff()}, \code{ragg::agg_jpeg()}
produce substantially higher quality output, and with more successful
usage of system fonts, than \code{png()}, \code{tiff()}, and \code{jpeg()}.
Similarly, for PDF output, consider \code{cairo_pdf()} or
\code{Cairo::CairoPDF()} instead of using \code{pdf()}.}

\item{poly_alpha}{\code{numeric} (default 0.6) value between 0 and 1, for
alpha transparency of the polygon fill color.
This value is ignored when \code{alpha_by_counts=TRUE}.
\itemize{
\item \code{poly_alpha=1} is completely opaque (no transparency)
\item \code{poly_alpha=0.8} is 80\% opaque
}}

\item{alpha_by_counts}{\code{logical} indicating whether to define
alpha transparency to Venn polygon fill based upon the counts
contained in each polygon. When \code{TRUE} the \code{poly_alpha} is ignored.}

\item{label_style}{\code{character} string indicating the style for labels.
Label color is adjusted based upon the determined background color,
determined based upon the label fill color, and either the
device background color, or Venn overlap fill color.
There are pre-defined label styles.
\itemize{
\item \code{"basic"} no background shading
\item \code{"fill"} an opaque colored background
\item \code{"shaded"} a partially transparent colored background
\item \code{"lite"} a partially transparent lite background
\item \code{"box"} adds a dark border around the label region
}}

\item{label_preset}{\code{character} deprecated in favor of \code{show_labels}.
This argument is passed to \code{venndir_label_style()}.}

\item{template}{\code{character} (default "wide") describing the default
layout for counts and signed counts. The value is stored in
\code{venndir@metadata$template} for persistence.
\itemize{
\item \code{"wide"} - main counts on the left, right-justified; signed counts
on the right, left-justified.
This option is preferred for small numbers, and less-crowded diagrams.
\item \code{"tall"} - main counts, center-justified; signed counts below main
counts, center-justified.
This option is recommended for large numbers (where there are 1000
or more items in a single overlap region), or for crowded diagrams.
}}

\item{unicode}{\code{logical} (default TRUE) indicating whether to
display Unicode arrows for signed overlaps. Passed to
\code{curate_venn_labels()}.
Use \code{unicode=FALSE} if the signed label is not displayed properly.
The most common causes: (1) the R console (terminal) is not configured
to allow Unicode (UTF-8 or UTF-16) characters; (2) the display
font does not contain Unicode characters in the font set.}

\item{big.mark}{\code{character} (default \code{","}) passed to \code{format()}
to augment numeric labels.}

\item{curate_df}{\code{data.frame} or \code{NULL} passed to \code{curate_venn_labels()},
used to customize the formatting of signed overlaps.}

\item{venn_jp}{\code{NULL} or optional \code{JamPolygon} which contains one
polygon for each \code{setlist}, intended to allow custom shapes to be
used. Otherwise \code{get_venn_polygon_shapes()} is called.}

\item{inside_percent_threshold}{\code{numeric} (default 0) indicating the
percent area that a Venn overlap region must contain in order
for the count label to be displayed inside the region,
otherwise the label is displayed outside the region.
Values are expected to range from 0 to 100.}

\item{item_cex}{\code{numeric} default 1, used to define baseline font size
(single value), or exact font \code{cex} values (multiple values).
\itemize{
\item When a single value is provided, each set of items is used to
define a font scaling, based upon the relative area of the
overlap polygon to the max item polygon area, and the number of
items in each polygon. These values are multiplied by \code{item_cex}
to produce the final adjustment.
These values are multiplied by \code{item_cex_factor}.
\item When multiple values are provided, they are recycled to the
number of polygons that contain items, and applied in order.
There is no further adjustment by polygon area, nor number of labels.
These values are multiplied by \code{item_cex_factor}.
}}

\item{item_style}{\code{character} string (default "text") indicating
the style to display item labels when they are enabled.
\itemize{
\item \code{"default"} detects whether item labels contain \code{"<br>"} for newlines,
and uses \code{"gridtext"} if that is the case, otherwise it uses \code{"text"}
which is markedly faster.
\item \code{"text"} option is substantially faster, but does not allow
markdown.
\item \code{"gridtext"}:  substantially slower for a large number of labels,
but enables use of limited markdown by calling
\code{gridtext::richtext_grob()}.
Mostly useful for \code{venn_meme()}.
}}

\item{item_buffer}{\code{numeric} value (default -0.15) indicating the buffer
adjustment applied to Venn overlap regions before arranging item
labels. Passed to \code{label_fill_JamPolygon()} via \code{render_venndir()}.
Negative values are recommended, so they shrink the region.}

\item{sign_count_delim}{\code{character} string used as a delimiter between
the sign and counts, when \code{overlap_type} is not \code{"overlap"}.}

\item{padding}{\code{numeric} padding in units \code{"mm"} (default \code{c(3, 2)})
for overlap count, and signed overlap count labels, in order.}

\item{r}{\code{numeric} radius in units \code{"mm"} used for rounded
rectangle corners for labels. Only visible when \code{label_preset}
includes a background fill ("lite", "shaded", "fill"), or "box".}

\item{center}{\code{numeric} coordinates relative to the plot bounding box,
default \code{c(0, -0.15)} uses a center point in the middle (x=0)
and slightly down (y=-0.15) from the plot center.
It is used to place labels outside the diagram.
In short, labels are placed by drawing a line from this center point,
outward through the Venn overlap region to be labeled. The
label is positioned outside the polygon region by \code{segment_distance}.
The default \code{c(0, -0.15)} ensures that labels tend to be at the
top of the plot, and not on the left/right side of the plot.
This argument is passed along to \code{label_outside_JamPolygon()}.}

\item{segment_distance}{\code{numeric} value indicating the distance
between outside labels and the outer edge of the Venn diaram region.
Larger values place labels farther away, while also shrinking the
relative size of the Venn diagram.}

\item{sep}{\code{character} used as a delimiter between set names,
the default is \code{"&"}.}

\item{do_plot}{`logical (default TRUE) indicating whether to generate the
the figure.
\itemize{
\item When \code{do_plot=TRUE} it calls \code{render_venndir()} to create \code{grid}
objects to be displayed. Arguments in \code{...} are passed to
\code{render_venndir()}: To hide display, use \code{do_draw=FALSE}.
To prevent calling \code{grid::grid.newpage()} so the plot can
be drawn inside another active display device, use \code{do_newpage=FALSE}.
\item When \code{do_plot=FALSE} the returned \code{Venndir} object can be passed to
\code{render_venndir()} to render the figure. Same points are valid
regarding \code{do_draw} and \code{do_newpage}, which are arguments
}}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{debug}{\code{numeric} optional internal debug.}

\item{circle_nudge}{\code{list} of \code{numeric} x,y vectors. Not yet
re-implemented after the version 0.0.30.900 update.}

\item{rotate_degrees}{\code{numeric} value in degrees, allowing rotation
of the Venn diagram. Not yet re-implemented after version 0.0.30.900.}

\item{...}{additional arguments are passed to \code{render_venndir()}.}
}
\value{
\code{Venndir} object with slots:
\itemize{
\item \code{"jps"}: \code{JamPolygon} which contains each set polygon, and each
overlap polygon defined for the Venn diagram.
\item \code{"label_df"}: \code{data.frame} which contains the coordinates for each
Venn set, and Venn overlap label.
\item \code{"setlist"}: \code{list} as input to \code{venndir()}. This entry may be empty.
}

When \code{do_plot=TRUE} this function also calls \code{render_venndir()},
and returns the \code{grid} graphical objects (grobs) in the attributes:
\itemize{
\item \code{"gtree"}: a \code{grid::gTree} object suitable for drawing
with \code{grid::grid.draw(attr(vo, "gtre"))}
\item \code{"grob_list"}: a \code{list} of \code{grid} object components used to build
the complete diagram, they can be plotted individually, or
assembled with \code{do.call(grid::gList, grob_list)}.
The \code{grid::gList} can be assembled into a \code{gTree} with:
\verb{grid::grobTree(gList=do.call(grid::gList, grob_list)}
\item \code{"viewport"}: the \code{grid::viewport} that holds important context
for the graphical objects, specifically the use of coordinate
\code{grid::unit} measure \code{"snpc"}, which maintains a fixed aspect ratio.
}
}
\description{
Directional Venn diagram
}
\examples{
setlist <- make_venn_test(100, 3, do_signed=FALSE);

setlist <- make_venn_test(100, 3, do_signed=TRUE);
vo <- venndir(setlist)
jamba::sdim(vo);

# custom set labels
vo <- venndir(setlist,
   setlist_labels=paste("set", LETTERS[1:3]))

# custom set labels with Markdown custom colors
vo <- venndir(setlist,
   setlist_labels=paste0("Set <span style='color:blue'>", LETTERS[1:3], "</span>"))

# custom set and legend labels
vo <- venndir(setlist,
   setlist_labels=paste0("set<br>", LETTERS[1:3]),
   legend_labels=paste("Set", LETTERS[1:3]))

# custom set and legend labels
# proportional
# Set Name is inside with show_labels having lowercase "n"
vo <- venndir(setlist,
   proportional=TRUE,
   show_labels="ncs",
   label_style="lite box",
   setlist_labels=paste0("Set: ", LETTERS[1:3]),
   legend_labels=paste("Set", LETTERS[1:3]))

}
\seealso{
Other venndir core: 
\code{\link{render_venndir}()},
\code{\link{signed_overlaps}()},
\code{\link{textvenn}()},
\code{\link{venn_meme}()}
}
\concept{venndir core}
