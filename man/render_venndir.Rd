% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/venndir-render-jp.R
\name{render_venndir}
\alias{render_venndir}
\title{Render venndir output, Venndir generic plot()}
\usage{
render_venndir(
  venndir_output = NULL,
  expand_fraction = NULL,
  font_cex = 1,
  main = NULL,
  item_cex = NULL,
  item_cex_factor = 1,
  plot_warning = FALSE,
  show_labels = NULL,
  show_items = NULL,
  item_degrees = NULL,
  max_items = 100,
  show_zero = TRUE,
  show_segments = NULL,
  segment_buffer = NULL,
  label_preset = c("none"),
  label_style = c("custom", "basic", "fill", "shaded", "shaded_box", "lite", "lite_box"),
  fontfamily = NULL,
  inside_percent_threshold = 0,
  item_style = NULL,
  item_buffer = NULL,
  group_labels = TRUE,
  template = NULL,
  adjust_center = FALSE,
  draw_legend = NULL,
  legend_x = "bottomright",
  legend_font_cex = NULL,
  draw_footnotes = NULL,
  show_label = NA,
  display_counts = TRUE,
  do_newpage = TRUE,
  do_draw = TRUE,
  draw_buffer = FALSE,
  verbose = FALSE,
  debug = FALSE,
  ...
)
}
\arguments{
\item{venndir_output}{\code{Venndir} output from \code{venndir()}, or
\code{list} with element \code{"vo"} as a \code{Venndir} object.}

\item{expand_fraction}{\code{numeric} value, default \code{NULL} to use automated
settings. It defines the figure margin fraction on each side in order:
bottom, left, top, right.
The default settings:
\itemize{
\item When \code{draw_legend=FALSE} it uses \code{c(0, 0, 0, 0)}.
\item When \code{draw_legend=TRUE} it uses \code{c(0.18, 0, 0, 0)}, in order
to help prevent the Venn diagram from overlapping the legend.
\item When \code{expand_fraction} is defined, it is used without any
adjustment.
}}

\item{font_cex}{\code{numeric} scalar to adjust font sizes.}

\item{main}{\code{character} string used as a plot title, default NULL
will render no title. When provided, it is rendered using
\code{gridtext::richtext_grob()} which enables some Markdown-style
formatting. The title is stored in \code{venndir@metadata$main}
for persistence.}

\item{item_cex}{\code{numeric} default NULL, used to define baseline font size
(single value), or exact font \code{cex} values (multiple values).
\itemize{
\item When a single value is provided, each set of items is used to
define a font scaling, based upon the relative area of the
overlap polygon to the max item polygon area, and the number of
items in each polygon. These values are multiplied by \code{item_cex}
to produce the final adjustment.
These values are multiplied by \code{item_cex_factor}.
\item When multiple values are provided with names, the names are
matched with overlap names: \code{venndir_output@label_df$overlap_set},
and applied accordingly. Any missing values retain the pre-existing
value by default.
\item When multiple values are provided without names, the length is
matched to the number of polygons in \code{venndir_output@jps@polygons}
with non-zero and non-NA venn_counts; or the number of
unique polygons in \code{venndir_output@jps@polygons$venn_name}; or
the number of unique overlaps in \code{venndir_output@label_df$overlap_set}.
If a length match is found, those values are assigned to
\code{names(item_cex)}.
There is no further adjustment by polygon area, nor number of labels.
These values are multiplied by \code{item_cex_factor}.
}}

\item{item_cex_factor}{\code{numeric}, default 1, used to adjust the
\code{item_cex} values overall. It is intended to be a single value,
and is multiplied by \code{item_cex} as it is defined for each set of items.}

\item{plot_warning}{\code{logical} indicating whether to include a warning
when one or more non-zero overlap counts cannot be displayed
in the figure.
\strong{Not yet re-implemented since version 0.0.30.900.}}

\item{show_labels}{\code{character} string to define the labels to display,
and where they should be displayed.
The definition uses a single letter to indicate each type of label
to display, using UPPERCASE to display the label outside the Venn shape,
and lowercase to display the label inside the Venn shape.
The default \code{"Ncs"} displays _N_ame (outside), _c_ount (inside),
and _s_igned count (inside).

The label types are defined below:
\itemize{
\item _N_ame: "n" or "N" - the set name, by default it is displayed.
\item _O_verlap: "o" or "O" - the overlap name, by default it is hidden,
because these labels can be very long, also the overlap should be
evident in the Venn diagram already.
\item _c_ount: "c" or "C" - overlap count, independent of the sign
\item _p_ercentage: "p" or "P" - overlap percentage, by default hidden,
but available as an option
\item _s_igned count: "s" or "S" - the signed overlap count, tabulated
based upon \code{overlap_type} ("each", "concordant", "agreement", etc/)
\item _i_tems: "i" only, by default hidden. When enabled, item labels
defined by \code{show_items} are spread across the specific Venn overlap
region.
}}

\item{show_items}{\code{character} used to define the item label,
only used when the \code{show_label} entry includes \code{"i"} which
enables item display inside the Venn diagram.
\itemize{
\item \code{"item"}: shows only the item labels
\item \code{"sign"}: shows only the sign of each item
\item \code{"sign items"}: shows the sign and item together
(or \code{"item sign"} will show the item, then the sign).
}}

\item{item_degrees}{\code{numeric} angle (default 0) in degrees used
to adjust item label display.}

\item{max_items}{\code{numeric} (default 3000) indicating the maximum number
of item labels to display when enabled.}

\item{show_zero}{\code{logical} (default FALSE) indicating whether empty
overlaps are labeled with count zero \code{0}. When \code{show_zero=TRUE} the
count zero label is displayed, otherwise no count label is shown.}

\item{show_segments}{\code{logical} (default TRUE) indicating whether to
draw a line segment from the Venn region to any label
positioned outside.}

\item{segment_buffer}{\code{numeric} (default -0.1) indicating the depth
inside each Venn region a line segment will be drawn, relevant
only when \code{show_segments=TRUE}.}

\item{label_preset}{\code{character} deprecated in favor of \code{show_labels}.
This argument is passed to \code{venndir_label_style()}.}

\item{label_style}{\code{character} string indicating the style for labels.
Label color is adjusted based upon the determined background color,
determined based upon the label fill color, and either the
device background color, or Venn overlap fill color.
There are pre-defined label styles.
\itemize{
\item \code{"basic"} no background shading
\item \code{"fill"} an opaque colored background
\item \code{"shaded"} a partially transparent colored background
\item \code{"lite"} a partially transparent lite background
\item \code{"box"} adds a dark border around the label region
}}

\item{fontfamily}{\code{character} string to define the fontfamily.
Default is "sans" because it should get mapped to a supported font
for each graphics device, and any missing glyphs such as the Unicode
upArrow and downArrow should be substituted with a suitable
font with those glyphs.
The \code{fontfamily} must match a font 'family' recognized by systemfonts.
Use \code{subset_systemfonts()} to review values in column 'family',
or \code{systemfonts::font_info()} to inspect possible font substitutions
based upon weight, style, or other typography. These substitutions
can be controlled in advanced, see \code{systemfonts::font_fallback()}
and related functions to define substitutions upfront as needed.

In some circumstances, either the font or substitution is not compatible
with PDF output, which tends to produce blank labels, presumably
when the font encoded in the PDF is not available to the PDF viewer.
You may check \code{grDevices::pdfFonts()} for more information.
A potential workaround is to embed the glyphs or fonts using
\code{grDevices::embedGlyphs()} or \code{grDevices::embedFonts()}.

The \code{ragg} devices, and \code{svglite} device, have the best \code{systemfonts}
support. RStudio works best with ragg output, which can be set with
RStudio Options->General->Graphics then set 'Backend' to use 'AGG'.
For ragg, try \code{ragg::agg_png()}, \code{ragg::agg_tiff()}, \code{ragg::agg_jpeg()}.
For PDF, try \code{cairo_pdf()} or \code{Cairo::CairoPDF()}.

The extreme fallback is to set \code{unicode=FALSE}, thereby avoiding
Unicode arrows. Further, use \code{fontfaces} and set all values to 'plain'
to avoid using bold fonts.}

\item{inside_percent_threshold}{\code{numeric} (default 0) indicating the
percent area that a Venn overlap region must contain in order
for the count label to be displayed inside the region,
otherwise the label is displayed outside the region.
Values are expected to range from 0 to 100.}

\item{item_style}{\code{character} string (default "text") indicating
the style to display item labels when they are enabled.
\itemize{
\item \code{"default"} detects whether item labels contain \code{"<br>"} for newlines,
and uses \code{"gridtext"} if that is the case, otherwise it uses \code{"text"}
which is markedly faster.
\item \code{"text"} option is substantially faster, but does not allow
markdown.
\item \code{"gridtext"}:  substantially slower for a large number of labels,
but enables use of limited markdown by calling
\code{gridtext::richtext_grob()}.
Mostly useful for \code{venn_meme()}.
}}

\item{item_buffer}{\code{numeric} value (default -0.15) indicating the buffer
adjustment applied to Venn overlap regions before arranging item
labels. Passed to \code{label_fill_JamPolygon()} via \code{render_venndir()}.
Negative values are recommended, so they shrink the region.}

\item{group_labels}{\code{logical} (default TRUE) indicating whether to group
label components together, therefore drawing fill and border
around the group instead of each component. In most cases this
setting should be TRUE.}

\item{template}{\code{character} (default "wide") describing the default
layout for counts and signed counts. The value is stored in
\code{venndir@metadata$template} for persistence.
\itemize{
\item \code{"wide"} - main counts on the left, right-justified; signed counts
on the right, left-justified.
\item \code{"tall"} - main counts, center-justified; signed counts below main
counts, center-justified.
}}

\item{adjust_center}{\code{logical} (default TRUE) used when labels are grouped,
whether the group should be re-centered on the target point.
Try \code{adjust_center=FALSE} if wide label groups are adjusted
so that the count label is too far left.}

\item{draw_legend}{\code{logical} (default NULL) indicating whether to draw
a legend, calling \code{venndir_legender()}.
When \code{NULL} it uses \code{metadata(venndir_output)$draw_legend} when defined,
otherwise defaults to \code{TRUE}.}

\item{legend_x}{\code{character} passed to \code{venndir_legender()} to customize
the position of the legend.}

\item{legend_font_cex}{\code{numeric} scalar to adjust the legend font size.}

\item{draw_footnotes}{\code{logical} (default NULL) indicating whether to draw
footnotes if they exist in the 'metadata' slot, calling
\code{render_venndir_footnotes()}.}

\item{do_newpage}{\code{logical} (default TRUE) indicating whether to call
\code{grid::grid.newpage()}. This option allows the figure to be rendered
inside an active display device, or active \code{grid::viewport}.
Note: When \code{do_draw=FALSE}, it also forces \code{do_newpage=FALSE}.}

\item{do_draw}{\code{logical} indicating whether to call \code{grid::grid.draw()}.
The \code{grid} graphical objects are returned in attributes:
"gtree", "grob_list", "viewport", and can be drawn separately.}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{debug}{\code{numeric} optional internal debug.}

\item{...}{additional arguments are passed to internal functions.}
}
\value{
\code{Venndir} object with attributes that contain underlying
\code{grid} graphical objects (grobs):
\itemize{
\item \code{"gtree"}: a \code{grid::gTree} object suitable for drawing
with \code{grid::grid.draw(attr(vo, "gtre"))}
\item \code{"grob_list"}: a \code{list} of \code{grid} object components used to build
the complete diagram, they can be plotted individually, or
assembled with \code{do.call(grid::gList, grob_list)}.
The \code{grid::gList} can be assembled into a \code{gTree} with:
\verb{grid::grobTree(gList=do.call(grid::gList, grob_list)}
\item \code{"viewport"}: the \code{grid::viewport} that holds important context
for the graphical objects, specifically the use of coordinate
\code{grid::unit} measure \code{"snpc"}, which maintains a fixed aspect ratio.
}
}
\description{
Render venndir output, generic plot function for a Venndir object
}
\details{
\subsection{About fonts and unicode symbols}{

R handles unicode symbols for each graphics device somewhat independently.
Creating a PNG uses a different set of fonts than creating a PDF.
Not all fonts used for PNG are compatible with PDF, and vice versa.
(It is not solely an R problem.)

For the most part, users should not have to care about these details...

How this affects venndir:

Not every font registered in R supports extended unicode characters
\code{upArrow} and \code{downArrow}, which causes it to draw blank boxes like \verb{[]}.
The quick options:
\itemize{
\item Try a different \code{fontfamily} that may support the characters of interest.
\item Try a different grob type, see \code{text_grob_type="marquee"} below.
\item Install \code{extrafont}, which may be useful for installing consistent
fonts to be used with PNG and PDF output formats.
}
}

\subsection{Additional custom options}{

Several options are passed through \code{...} (ellipses) to internal
functions, documented below:
\itemize{
\item '\code{L_threshold}' is passed to \code{make_color_contrast()} to control
the Luminance at which text is either dark or light. If dark text
is shown on a dark background, set \code{L_threshold=55} or below the default 65.
\item '\code{text_grob_type}' is passed to \code{assemble_venndir_labels()} to control
the type of \code{grid} graphical object (grob).
\itemize{
\item \code{text_grob_type="marquee"} (default) uses \code{marquee::marquee_grob()}.
Its rendering of Unicode is outstanding, and is the future of R font
rendering. It is not 100\% compatible with all device outputs.
Its main feature is using \code{systemfonts} to substitute missing glyphs
to use another font, for example it always finds Unicode
upArrow/downArrow and other Unicode symbols.
It also handles CommonMark markdown, images, bullets, but not HTML.
\item \code{text_grob_type="textGrob"} uses \code{grid::textGrob()}, which is the
grid default. It does not handle markdown syntax, and no special handling
of Unicode characters. It is the fastest rendering option.
\item \code{text_grob_type="richtext_grob"} uses \code{gridtext::richtext_grob()},
which requires the \code{gridtext} package. This approach will be removed,
and is kept as a fallback option until marquee is more fully tested.
It recognizes markdown, and some limited HTML.
}
\item '\code{fontfamilies}' is passed to \code{assemble_venndir_label()}, as a \code{list}
with three named elements: \code{"overlap"}, \code{"count"}, \code{"signed"}
\itemize{
\item It allows a custom font to be used for each type of label.
It may be useful to use a light font or narrow font for signed labels,
for example.
\item The custom font is also recognized by \code{venndir_legender()} for
consistency, for example a custom count font is used for count labels
in the legend.
}
\item \code{outerborder},\code{outerborder.lwd},\code{innerborder},\code{innerborder.lwd},
\code{border},\code{border.lwd}
\itemize{
\item These arguments are passed to \code{plot.JamPolygon()}
and override internal values when defined.
They can produce interesting effects.
\item The innerborder is drawn only on the inside edge of each polygon.
\item The outerborder is drawn only on the outside edge of each polygon.
\item The border is drawn on the border edge itself - and for Venndir
objects by default is typically not drawn.
\item Use white borders: \verb{outerborder=NA, innerborder="white"}
\item Use wide internal border, thin white line:
\verb{outerborder=NA, innerborder.lwd=4, border="white", border.lwd=1}
}
}
}
}
\seealso{
Other venndir core: 
\code{\link{textvenn}()},
\code{\link{venn_meme}()},
\code{\link{venndir}()}
}
\concept{venndir core}
